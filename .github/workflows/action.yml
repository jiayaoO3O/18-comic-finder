# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Java CI with Maven

on:
  push:
    branches: [ master ]
    paths:
      - 'src/main/resources/*.json'

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - name: 签出代码
        uses: actions/checkout@v2
      - name: 初始化GraalVM-17
        uses: ayltai/setup-graalvm@v1
        with:
          java-version: 17
          graalvm-version: 21.3.0
          native-image: false
      - name: 开始打包
        run: |
          mvn -B clean package -Dmaven.test.skip=true --file pom.xml -T 4
      - name: 开始下载
        run: |
          cd ./target
          java -jar -Xms1g -Xmx7g ./*.jar
      - name: 开始上传
        uses: actions/upload-artifact@v2.2.2
        with:
          # Artifact name
          name: finder-result
          # A file, directory or wildcard pattern that describes what to upload
          path: /home/runner/work/finder
          # The desired behavior if no files are found using the provided path.
          if-no-files-found: warn
          # Duration after which artifact will expire in days. 0 means using default retention.Minimum 1 day. Maximum 90 days unless changed from the repository settings page.
          retention-days: 90
  deploy:
    runs-on: ubuntu-latest
    name: Upload Release Asset
    # 依赖上一个job
    needs: build
    steps:
      - name: Download build result for job apk
        uses: actions/download-artifact@v2
        with:
          # Artifact name
          name: finder-result
      # 发布release，版本号是用户git push的tag里面的版本号，发布的只有代码压缩包（与手动默认发布一致）
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          # GitHub 会自动创建 GITHUB_TOKEN 密码以在工作流程中使用
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # 设置时区，默认是格林尼治时间
          # TZ: Asia/Shanghai
        with:
          tag_name: 1.1.0
          release_name: xcx
          draft: false
          prerelease: false
          # 这一步是对上一步发布的release文件的补充，调用github api上传一个apk文件
      - name: Upload Release Asset
        id: upload-release-asset 
        # 只有create_release成功得到输出才继续
        if: steps.create_release.outputs.upload_url
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} 
          asset_path: ./finder-result
          asset_name: finder-result
          asset_content_type: application/zip
